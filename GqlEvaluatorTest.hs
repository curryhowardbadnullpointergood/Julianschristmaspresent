module GqlEvaluatorTest where

import InputParser
import InputLexer
import LangParser
import LangLexer
-- import GqlEvaluator (evalMatch, VariableValue (TypeNodes, TypeRelations), Relations, getRelationships)
import GqlEvaluator

parsedFile = File [NodeSet (NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False) [NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] [],NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] [],NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] [],NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] [],NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] [],NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] [],NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] [],NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] [],NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] [],NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] [],NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] [],NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] [],NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] [],NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []]] [RelationshipSet (RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger]) [RelationshipEntry "t1" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t10" "Beat",RelationshipEntry "t11" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t2" "Beat",RelationshipEntry "t3" [LiteralInt 3,LiteralInt 1,LiteralInt 1] "t12" "DrewWith",RelationshipEntry "t13" [LiteralInt 3,LiteralInt 1,LiteralInt 2] "t4" "Beat",RelationshipEntry "t14" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t5" "Beat",RelationshipEntry "t6" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t8" "Beat",RelationshipEntry "t7" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t9" "Beat",RelationshipEntry "t1" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t9" "Beat",RelationshipEntry "t10" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t2" "Beat",RelationshipEntry "t3" [LiteralInt 2,LiteralInt 0,LiteralInt 4] "t11" "Beat",RelationshipEntry "t4" [LiteralInt 2,LiteralInt 3,LiteralInt 3] "t12" "DrewWith",RelationshipEntry "t5" [LiteralInt 2,LiteralInt 0,LiteralInt 0] "t13" "DrewWith",RelationshipEntry "t14" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t6" "Beat",RelationshipEntry "t7" [LiteralInt 2,LiteralInt 1,LiteralInt 1] "t8" "DrewWith",RelationshipEntry "t1" [LiteralInt 1,LiteralInt 2,LiteralInt 4] "t8" "Beat",RelationshipEntry "t2" [LiteralInt 1,LiteralInt 1,LiteralInt 1] "t9" "DrewWith",RelationshipEntry "t3" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t10" "Beat",RelationshipEntry "t4" [LiteralInt 1,LiteralInt 1,LiteralInt 3] "t11" "Beat",RelationshipEntry "t5" [LiteralInt 1,LiteralInt 2,LiteralInt 2] "t12" "DrewWith",RelationshipEntry "t6" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t13" "Beat",RelationshipEntry "t7" [LiteralInt 1,LiteralInt 0,LiteralInt 2] "t14" "Beat"]]

parsedProblem2 = File [NodeSet (NodeHeader [Field "site" TypeString] True) [NodeEntry "loc1" [LiteralStr "Garden"] [Label "Location"],NodeEntry "loc2" [LiteralStr "FrontRoom"] [Label "Location"],NodeEntry "loc3" [LiteralStr "Kitchen"] [Label "Location"],NodeEntry "loc4" [LiteralStr "MainBedroom"] [Label "Location"]],NodeSet (NodeHeader [Field "description" TypeString,Field "duration" TypeInteger] True) [NodeEntry "task1" [LiteralStr "Paving",LiteralInt 8] [Label "Job"],NodeEntry "task2" [LiteralStr "Fencing",LiteralInt 12] [Label "Job"],NodeEntry "task3" [LiteralStr "Wiring",LiteralInt 4] [Label "Job"],NodeEntry "task4" [LiteralStr "Plumbing",LiteralInt 12] [Label "Job"],NodeEntry "task5" [LiteralStr "Painting",LiteralInt 4] [Label "Job"]],NodeSet (NodeHeader [Field "name" TypeString] True) [NodeEntry "emp1" [LiteralStr "Jane"] [Label "Staff"],NodeEntry "emp2" [LiteralStr "Bill"] [Label "Staff"],NodeEntry "emp3" [LiteralStr "Winona"] [Label "Staff"],NodeEntry "emp4" [LiteralStr "Rajesh"] [Label "Staff"],NodeEntry "emp5" [LiteralStr "Jakub"] [Label "Staff"]]] [RelationshipSet (RelationshipHeader [Field "priority" TypeInteger]) [RelationshipEntry "loc1" [LiteralInt 2] "task1" "ToComplete",RelationshipEntry "loc1" [LiteralInt 4] "task2" "ToComplete",RelationshipEntry "loc2" [LiteralInt 9] "task3" "ToComplete",RelationshipEntry "loc2" [LiteralInt 1] "task5" "ToComplete",RelationshipEntry "loc3" [LiteralInt 8] "task3" "ToComplete",RelationshipEntry "loc3" [LiteralInt 10] "task4" "ToComplete",RelationshipEntry "loc4" [LiteralInt 9] "task3" "ToComplete",RelationshipEntry "loc4" [LiteralInt 1] "task5" "ToComplete"],RelationshipSet (RelationshipHeader [Field "available" TypeBoolean]) [RelationshipEntry "emp1" [LiteralBool True] "task1" "CanDo",RelationshipEntry "emp1" [LiteralBool True] "task2" "CanDo",RelationshipEntry "emp2" [LiteralBool False] "task1" "CanDo",RelationshipEntry "emp3" [LiteralBool True] "task3" "CanDo",RelationshipEntry "emp4" [LiteralBool True] "task2" "CanDo",RelationshipEntry "emp4" [LiteralBool True] "task4" "CanDo",RelationshipEntry "emp5" [LiteralBool False] "task4" "CanDo"]]
parsedInputPattern      = PatternFinal "n"
parsedInputPattern'     = PatternRelatedTo "n" "s"
parsedInputPattern''    = PatternRelatedToVar "n" "r" "s"
parsedInputPattern'''   = PatternRelatedBy "n" "s"
parsedInputPattern''''  = PatternRelatedByVar "n" "r" "s"
parsedInputPattern''''' = PatternRelated "n" "s"
parsedRelationshipNodes = [(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t10" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t11" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t2" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 3,LiteralInt 1,LiteralInt 1] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t13" [LiteralInt 3,LiteralInt 1,LiteralInt 2] "t4" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t14" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t5" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t6" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t8" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t9" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t9" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t10" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t2" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 2,LiteralInt 0,LiteralInt 4] "t11" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t4" [LiteralInt 2,LiteralInt 3,LiteralInt 3] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t5" [LiteralInt 2,LiteralInt 0,LiteralInt 0] "t13" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t14" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t6" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 2,LiteralInt 1,LiteralInt 1] "t8" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 1,LiteralInt 2,LiteralInt 4] "t8" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t2" [LiteralInt 1,LiteralInt 1,LiteralInt 1] "t9" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t10" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t4" [LiteralInt 1,LiteralInt 1,LiteralInt 3] "t11" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t5" [LiteralInt 1,LiteralInt 2,LiteralInt 2] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t6" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t13" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 1,LiteralInt 0,LiteralInt 2] "t14" "Beat")]
parsedOutput = (StrOutput "n" "team" "team")
parsedOutput' = IntOutput "n" "points" "points"
parsedOutput'' = BoolOutput "n" "available" "available"
variTestNode = ("n",TypeNodes [(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] [])])

variTestRelation = ("n", TypeRelations [(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc1" [LiteralInt 2] "task1" "ToComplete"),(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc1" [LiteralInt 4] "task2" "ToComplete"),(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc2" [LiteralInt 9] "task3" "ToComplete"),(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc2" [LiteralInt 1] "task5" "ToComplete"),(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc3" [LiteralInt 8] "task3" "ToComplete"),(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc3" [LiteralInt 10] "task4" "ToComplete"),(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc4" [LiteralInt 9] "task3" "ToComplete"),(RelationshipHeader [Field "priority" TypeInteger],RelationshipEntry "loc4" [LiteralInt 1] "task5" "ToComplete"),(RelationshipHeader [Field "available" TypeBoolean],RelationshipEntry "emp1" [LiteralBool True] "task1" "CanDo"),(RelationshipHeader [Field "available" TypeBoolean],RelationshipEntry "emp1" [LiteralBool True] "task2" "CanDo"),(RelationshipHeader [Field "available" TypeBoolean],RelationshipEntry "emp2" [LiteralBool False] "task1" "CanDo"),(RelationshipHeader [Field "available" TypeBoolean],RelationshipEntry "emp3" [LiteralBool True] "task3" "CanDo"),(RelationshipHeader [Field "available" TypeBoolean],RelationshipEntry "emp4" [LiteralBool True] "task2" "CanDo"),(RelationshipHeader [Field "available" TypeBoolean],RelationshipEntry "emp4" [LiteralBool True] "task4" "CanDo"),(RelationshipHeader [Field "available" TypeBoolean],RelationshipEntry "emp5" [LiteralBool False] "task4" "CanDo")])

main :: IO()
main = do
    putStrLn "\n------------------------------------------------\n------------------------------------------------\n"
    putStrLn "Starting Tests:"
    evalMatchTest
    evalOutputTest
    putStrLn "\n------------------------------------------------\n------------------------------------------------\n"

evalMatchTest :: IO ()
evalMatchTest = do
    putStrLn "\n------------------------------------------------\n------------------------------------------------\n"
    putStrLn "EVAL MATCH Tests:\n"
    assertEqual "Test 1: " (evalPattern [] parsedInputPattern parsedFile )      ([("n", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] [])]))])
    assertEqual "Test 2: " (evalPattern [] parsedInputPattern' parsedFile)      ([("n", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] [])])),("s", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] [])]))])
    assertEqual "Test 3: " (evalPattern [] parsedInputPattern'' parsedFile)     ([("n", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] [])])),("s", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] [])])), ("r" , TypeRelations ([(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t2" [LiteralInt 1,LiteralInt 1,LiteralInt 1] "t9" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t5" [LiteralInt 2,LiteralInt 0,LiteralInt 0] "t13" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t5" [LiteralInt 1,LiteralInt 2,LiteralInt 2] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t4" [LiteralInt 2,LiteralInt 3,LiteralInt 3] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t4" [LiteralInt 1,LiteralInt 1,LiteralInt 3] "t11" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t10" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t2" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t9" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 2,LiteralInt 1,LiteralInt 1] "t8" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 1,LiteralInt 0,LiteralInt 2] "t14" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t6" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t8" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t6" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t13" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t14" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t5" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t14" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t6" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t13" [LiteralInt 3,LiteralInt 1,LiteralInt 2] "t4" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 3,LiteralInt 1,LiteralInt 1] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 2,LiteralInt 0,LiteralInt 4] "t11" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t10" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t11" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t2" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t10" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t9" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 1,LiteralInt 2,LiteralInt 4] "t8" "Beat")]))])
    assertEqual "Test 4: " (evalPattern [] parsedInputPattern''' parsedFile)    ([("n", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] [])])), ("s", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] [])]))])
    assertEqual "Test 5: " (evalPattern [] parsedInputPattern'''' parsedFile)   ([("n", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] [])])),("s",  TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] [])])), ("r", TypeRelations ([(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t2" [LiteralInt 1,LiteralInt 1,LiteralInt 1] "t9" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t5" [LiteralInt 2,LiteralInt 0,LiteralInt 0] "t13" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t5" [LiteralInt 1,LiteralInt 2,LiteralInt 2] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t4" [LiteralInt 2,LiteralInt 3,LiteralInt 3] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t4" [LiteralInt 1,LiteralInt 1,LiteralInt 3] "t11" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t10" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t2" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t9" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 2,LiteralInt 1,LiteralInt 1] "t8" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t7" [LiteralInt 1,LiteralInt 0,LiteralInt 2] "t14" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t6" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t8" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t6" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t13" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t14" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t5" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t14" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t6" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t13" [LiteralInt 3,LiteralInt 1,LiteralInt 2] "t4" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 3,LiteralInt 1,LiteralInt 1] "t12" "DrewWith"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 2,LiteralInt 0,LiteralInt 4] "t11" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t3" [LiteralInt 1,LiteralInt 0,LiteralInt 1] "t10" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t11" [LiteralInt 3,LiteralInt 0,LiteralInt 1] "t2" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 3,LiteralInt 2,LiteralInt 3] "t10" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 2,LiteralInt 0,LiteralInt 1] "t9" "Beat"),(RelationshipHeader [Field "week" TypeInteger,Field "ga" TypeInteger,Field "gf" TypeInteger],RelationshipEntry "t1" [LiteralInt 1,LiteralInt 2,LiteralInt 4] "t8" "Beat")]))])
    assertEqual "Test 6: " (evalPattern [] parsedInputPattern''''' parsedFile)  ([("n", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] [])])), ("s", TypeNodes ([(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t9" [LiteralNull,LiteralStr "Ringwood"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t8" [LiteralNull,LiteralStr "Fareham"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t12" [LiteralInt 3,LiteralStr "Southampton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t2" [LiteralNull,LiteralStr "Romsey"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t5" [LiteralNull,LiteralStr "Totton"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t4" [LiteralInt 4,LiteralStr "FairOak"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t10" [LiteralInt 3,LiteralStr "Hythe"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t7" [LiteralInt 7,LiteralStr "Hamble"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t6" [LiteralInt 6,LiteralStr "Weston"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t14" [LiteralInt 6,LiteralStr "Lyndhurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t13" [LiteralInt 4,LiteralStr "Ashurst"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t3" [LiteralInt 7,LiteralStr "Eastleigh"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t11" [LiteralInt 3,LiteralStr "Shirley"] []),(NodeHeader [Field "points" TypeInteger,Field "team" TypeString] False,NodeEntry "t1" [LiteralInt 9,LiteralStr "Winchester"] [])]))])

assertEqual :: (Eq a, Show a) => String -> a -> a -> IO ()
assertEqual testName actual expected =
    if actual == expected
        then putStrLn $ testName ++ " passed."
        else putStrLn $ testName ++ " failed. Expected: \n" ++ show expected ++ "\n ------------------------------------------------------\n, but got: \n" ++ show actual


evalOutputTest :: IO()
evalOutputTest = do 
    putStrLn "\n------------------------------------------------\n------------------------------------------------\n"
    putStrLn "EVAL OUTPUT Tests:\n"
    assertEqual "Test 1: " ( evalOutput [variTestNode] parsedOutput) ([LiteralStr "Romsey",LiteralStr "Totton"])
    assertEqual "Test 2: " ( evalOutput [variTestNode] parsedOutput') ([LiteralNull,LiteralNull])
    assertEqual "Test 3: " ( evalOutput [variTestRelation] parsedOutput'') ([LiteralNull,LiteralNull,LiteralNull,LiteralNull,LiteralNull,LiteralNull,LiteralNull,LiteralNull,LiteralBool True,LiteralBool True,LiteralBool False,LiteralBool True,LiteralBool True,LiteralBool True,LiteralBool False])



-- getRelationshipNodes :: File -> Relations
-- getRelationshipNodes file = getRelationships file 
