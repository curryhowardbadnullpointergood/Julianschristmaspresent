module TestHelpers where
import GqlEvaluator
import LangParser
import LangLexer
import InputLexer
import InputParser

-- THESE NEED TO BE TURNED INTO ACTUAL VARIABLES FOR THE TESTING

-- SCUFFED, NEEDS LOOKING AT BEFORE TESTING

-- exampleVariables1 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] []]] []
-- exampleVariables2 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] True) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [Label "A"],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [Label "B"],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [Label "C"],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [Label "D"],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [Label "E"],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] [Label "F"]]] []
-- exampleVariables3 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean,Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True,LiteralStr "g",LiteralInt 7,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False,LiteralStr "h",LiteralInt 8,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True,LiteralStr "i",LiteralInt 9,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False,LiteralStr "j",LiteralInt 10,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True,LiteralStr "k",LiteralInt 11,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False,LiteralStr "l",LiteralInt 12,LiteralBool False] []]] []
-- exampleVariables4 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean,Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean] True) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True,LiteralStr "g",LiteralInt 7,LiteralBool True] [Label "A"],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False,LiteralStr "h",LiteralInt 8,LiteralBool False] [Label "B"],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True,LiteralStr "i",LiteralInt 9,LiteralBool True] [Label "C"],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False,LiteralStr "j",LiteralInt 10,LiteralBool False] [Label "D"],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True,LiteralStr "k",LiteralInt 11,LiteralBool True] [Label "E"],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False,LiteralStr "l",LiteralInt 12,LiteralBool False] [Label "F"]]] []
-- exampleVariables5 = File [] [RelationshipSet (RelationshipHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean,Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 7,LiteralStr "g",LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 8,LiteralStr "h",LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 9,LiteralStr "i",LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 10,LiteralStr "j",LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 11,LiteralStr "k",LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 12,LiteralStr "l",LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"]]
-- exampleVariables6 = File [] [RelationshipSet (RelationshipHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"]]
-- exampleVariables7 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] False) [NodeEntry "a" [LiteralNull,LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralNull,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralNull] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralNull,LiteralInt 6,LiteralBool False] []]] []
-- exampleVariables8 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] True) [NodeEntry "a" [LiteralNull,LiteralInt 1,LiteralNull] [Label "A"],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [Label "B"],NodeEntry "c" [LiteralStr "c",LiteralNull,LiteralBool True] [Label "C"],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [Label "D"],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [Label "E"],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralNull] [Label "F"]]] []
-- exampleVariables9 = File [] [RelationshipSet (RelationshipHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralNull,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralNull] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralNull,LiteralInt 6,LiteralStr "f"] "f" "f"]]
-- exampleVariables10 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] []],NodeSet (NodeHeader [Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean] False) [NodeEntry "g" [LiteralStr "g",LiteralInt 7,LiteralBool True] [],NodeEntry "h" [LiteralStr "h",LiteralInt 8,LiteralBool False] [],NodeEntry "i" [LiteralStr "i",LiteralInt 9,LiteralBool True] [],NodeEntry "j" [LiteralStr "j",LiteralInt 10,LiteralBool False] [],NodeEntry "k" [LiteralStr "k",LiteralInt 11,LiteralBool True] [],NodeEntry "l" [LiteralStr "l",LiteralInt 12,LiteralBool False] []]] []
-- exampleVariables11 = File [] [RelationshipSet (RelationshipHeader [Field "exstr1" TypeString,Field "exint2" TypeInteger,Field "exbool3" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"],RelationshipSet (RelationshipHeader [Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean]) [RelationshipEntry "g" [LiteralBool True,LiteralInt 1,LiteralStr "g"] "g" "g",RelationshipEntry "h" [LiteralBool False,LiteralInt 2,LiteralStr "h"] "h" "h",RelationshipEntry "i" [LiteralBool True,LiteralInt 3,LiteralStr "i"] "i" "i",RelationshipEntry "j" [LiteralBool False,LiteralInt 4,LiteralStr "j"] "j" "j",RelationshipEntry "k" [LiteralBool True,LiteralInt 5,LiteralStr "k"] "k" "k",RelationshipEntry "l" [LiteralBool False,LiteralInt 6,LiteralStr "l"] "l" "l"]]
-- exampleVariables12 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] []]] [RelationshipSet (RelationshipHeader [Field "exstr1" TypeString,Field "exint2" TypeInteger,Field "exbool3" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"]]

exampleFile1 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] []]] []
exampleFile2 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] True) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [Label "A"],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [Label "B"],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [Label "C"],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [Label "D"],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [Label "E"],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] [Label "F"]]] []
exampleFile3 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean,Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True,LiteralStr "g",LiteralInt 7,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False,LiteralStr "h",LiteralInt 8,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True,LiteralStr "i",LiteralInt 9,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False,LiteralStr "j",LiteralInt 10,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True,LiteralStr "k",LiteralInt 11,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False,LiteralStr "l",LiteralInt 12,LiteralBool False] []]] []
exampleFile4 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean,Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean] True) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True,LiteralStr "g",LiteralInt 7,LiteralBool True] [Label "A"],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False,LiteralStr "h",LiteralInt 8,LiteralBool False] [Label "B"],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True,LiteralStr "i",LiteralInt 9,LiteralBool True] [Label "C"],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False,LiteralStr "j",LiteralInt 10,LiteralBool False] [Label "D"],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True,LiteralStr "k",LiteralInt 11,LiteralBool True] [Label "E"],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False,LiteralStr "l",LiteralInt 12,LiteralBool False] [Label "F"]]] []
exampleFile5 = File [] [RelationshipSet (RelationshipHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean,Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 7,LiteralStr "g",LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 8,LiteralStr "h",LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 9,LiteralStr "i",LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 10,LiteralStr "j",LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 11,LiteralStr "k",LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 12,LiteralStr "l",LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"]]exampleFile6 = File [] [RelationshipSet (RelationshipHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"]]
exampleFile7 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] False) [NodeEntry "a" [LiteralNull,LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralNull,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralNull] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralNull,LiteralInt 6,LiteralBool False] []]] []
exampleFile8 = File [NodeSet (NodeHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean] True) [NodeEntry "a" [LiteralNull,LiteralInt 1,LiteralNull] [Label "A"],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [Label "B"],NodeEntry "c" [LiteralStr "c",LiteralNull,LiteralBool True] [Label "C"],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [Label "D"],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [Label "E"],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralNull] [Label "F"]]] []
exampleFile9 = File [] [RelationshipSet (RelationshipHeader [Field "exstr" TypeString,Field "exint" TypeInteger,Field "exbool" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralNull,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralNull] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralNull,LiteralInt 6,LiteralStr "f"] "f" "f"]]
exampleFile10 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] []],NodeSet (NodeHeader [Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean] False) [NodeEntry "g" [LiteralStr "g",LiteralInt 7,LiteralBool True] [],NodeEntry "h" [LiteralStr "h",LiteralInt 8,LiteralBool False] [],NodeEntry "i" [LiteralStr "i",LiteralInt 9,LiteralBool True] [],NodeEntry "j" [LiteralStr "j",LiteralInt 10,LiteralBool False] [],NodeEntry "k" [LiteralStr "k",LiteralInt 11,LiteralBool True] [],NodeEntry "l" [LiteralStr "l",LiteralInt 12,LiteralBool False] []]] []
exampleFile11 = File [] [RelationshipSet (RelationshipHeader [Field "exstr1" TypeString,Field "exint2" TypeInteger,Field "exbool3" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"],RelationshipSet (RelationshipHeader [Field "exstr2" TypeString,Field "exint2" TypeInteger,Field "exbool2" TypeBoolean]) [RelationshipEntry "g" [LiteralBool True,LiteralInt 1,LiteralStr "g"] "g" "g",RelationshipEntry "h" [LiteralBool False,LiteralInt 2,LiteralStr "h"] "h" "h",RelationshipEntry "i" [LiteralBool True,LiteralInt 3,LiteralStr "i"] "i" "i",RelationshipEntry "j" [LiteralBool False,LiteralInt 4,LiteralStr "j"] "j" "j",RelationshipEntry "k" [LiteralBool True,LiteralInt 5,LiteralStr "k"] "k" "k",RelationshipEntry "l" [LiteralBool False,LiteralInt 6,LiteralStr "l"] "l" "l"]]
exampleFile12 = File [NodeSet (NodeHeader [Field "exstr1" TypeString,Field "exint1" TypeInteger,Field "exbool1" TypeBoolean] False) [NodeEntry "a" [LiteralStr "a",LiteralInt 1,LiteralBool True] [],NodeEntry "b" [LiteralStr "b",LiteralInt 2,LiteralBool False] [],NodeEntry "c" [LiteralStr "c",LiteralInt 3,LiteralBool True] [],NodeEntry "d" [LiteralStr "d",LiteralInt 4,LiteralBool False] [],NodeEntry "e" [LiteralStr "e",LiteralInt 5,LiteralBool True] [],NodeEntry "f" [LiteralStr "f",LiteralInt 6,LiteralBool False] []]] [RelationshipSet (RelationshipHeader [Field "exstr1" TypeString,Field "exint2" TypeInteger,Field "exbool3" TypeBoolean]) [RelationshipEntry "a" [LiteralBool True,LiteralInt 1,LiteralStr "a"] "a" "a",RelationshipEntry "b" [LiteralBool False,LiteralInt 2,LiteralStr "b"] "b" "b",RelationshipEntry "c" [LiteralBool True,LiteralInt 3,LiteralStr "c"] "c" "c",RelationshipEntry "d" [LiteralBool False,LiteralInt 4,LiteralStr "d"] "d" "d",RelationshipEntry "e" [LiteralBool True,LiteralInt 5,LiteralStr "e"] "e" "e",RelationshipEntry "f" [LiteralBool False,LiteralInt 6,LiteralStr "f"] "f" "f"]]

parsedReturn      = ReturnNodeRelation "n" "s"
parsedReturn'     = ReturnNode "n"

main :: IO()
main = do
    testHelpers
    putStrLn "\n------------------------------------------------\n------------------------------------------------\n"

testHelpers :: IO ()
testHelpers = do
    putStrLn "\n------------------------------------------------\n------------------------------------------------\n"
    putStrLn "Tests:\n"

    testOutput "\n--- Test 1: --- \n\n" -- (evalReturn exampleVariables1 parsedReturn') exampleFile1

    testOutput "\n--- Test 2: --- \n\n" -- (evalReturn exampleVariables2 parsedReturn') exampleFile2

    testOutput "\n--- Test 3: --- \n\n" -- (evalReturn exampleVariables3 parsedReturn') exampleFile3

    testOutput "\n--- Test 4: --- \n\n" -- (evalReturn exampleVariables4 parsedReturn') exampleFile4

    testOutput "\n--- Test 5: --- \n\n" -- (evalReturn exampleVariables5 parsedReturn) exampleFile5

    testOutput "\n--- Test 6: --- \n\n" -- (evalReturn exampleVariables6 parsedReturn) exampleFile6

    testOutput "\n--- Test 7: --- \n\n" -- (evalReturn exampleVariables7 parsedReturn') exampleFile7

    testOutput "\n--- Test 8: --- \n\n" -- (evalReturn exampleVariables8 parsedReturn') exampleFile8

    testOutput "\n--- Test 9: --- \n\n" -- (evalReturn exampleVariables9 parsedReturn) exampleFile9

    testOutput "\n--- Test 10: --- \n\n" -- (evalReturn exampleVariables10 parsedReturn') exampleFile10

    testOutput "\n--- Test 11: --- \n\n" -- (evalReturn exampleVariables11 parsedReturn) exampleFile11

    testOutput "\n--- Test 12: --- \n\n" -- (evalReturn exampleVariables12 parsedReturn) exampleFile12

assertEqual :: (Eq a, Show a) => String -> a -> a -> IO ()
assertEqual testName actual expected =
    if actual == expected
        then putStrLn $ testName ++ " PASSED."
        else putStrLn $ testName ++ " FAILED. Expected: \n" ++ show expected ++ "\n ------------------------------------------------------\n, but got: \n" ++ show actual


